
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 20 15:48:09 CDT 2021
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 20 15:48:09 CDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\007\000\002\002" +
    "\010\000\002\022\004\000\002\022\003\000\002\010\014" +
    "\000\002\010\011\000\002\034\004\000\002\034\003\000" +
    "\002\034\004\000\002\034\003\000\002\034\004\000\002" +
    "\034\004\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\004\000\002\004\005\000\002\004" +
    "\006\000\002\004\007\000\002\004\007\000\002\004\005" +
    "\000\002\004\006\000\002\004\007\000\002\004\007\000" +
    "\002\004\010\000\002\004\010\000\002\004\007\000\002" +
    "\004\010\000\002\004\005\000\002\004\006\000\002\004" +
    "\007\000\002\004\010\000\002\004\007\000\002\004\010" +
    "\000\002\004\007\000\002\004\010\000\002\004\005\000" +
    "\002\004\006\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\004\010\000\002\011\005\000\002\011" +
    "\004\000\002\011\005\000\002\011\004\000\002\007\005" +
    "\000\002\007\004\000\002\033\006\000\002\033\006\000" +
    "\002\033\006\000\002\033\006\000\002\025\005\000\002" +
    "\025\004\000\002\016\003\000\002\016\005\000\002\016" +
    "\006\000\002\016\005\000\002\016\006\000\002\016\004" +
    "\000\002\016\003\000\002\030\003\000\002\030\004\000" +
    "\002\027\005\000\002\013\007\000\002\031\004\000\002" +
    "\031\004\000\002\024\005\000\002\024\004\000\002\024" +
    "\007\000\002\024\006\000\002\024\007\000\002\024\006" +
    "\000\002\017\003\000\002\017\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\023" +
    "\003\000\002\023\003\000\002\015\003\000\002\015\004" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\006\004\000\002\005\011\000\002" +
    "\005\015\000\002\014\011\000\002\021\007\000\002\026" +
    "\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\004\041\004\001\002\000\004\026\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\024\010\001\002\000\020\003\020\004\023\005" +
    "\016\006\011\014\013\030\021\042\024\001\002\000\006" +
    "\023\uffa5\030\243\001\002\000\016\004\ufff9\005\ufff9\006" +
    "\ufff9\014\ufff9\030\ufff9\042\ufff9\001\002\000\004\030\310" +
    "\001\002\000\016\004\023\005\016\006\011\014\013\030" +
    "\021\042\024\001\002\000\004\023\273\001\002\000\006" +
    "\023\uffa6\030\200\001\002\000\014\004\267\005\272\006" +
    "\271\025\266\042\024\001\002\000\006\025\264\027\265" +
    "\001\002\000\004\017\105\001\002\000\016\004\ufff7\005" +
    "\ufff7\006\ufff7\014\ufff7\030\ufff7\042\ufff7\001\002\000\006" +
    "\023\uffa7\030\065\001\002\000\004\023\026\001\002\000" +
    "\014\004\ufffd\005\ufffd\006\ufffd\025\ufffd\042\ufffd\001\002" +
    "\000\004\021\027\001\002\000\004\022\030\001\002\000" +
    "\004\024\031\001\002\000\026\003\044\004\046\005\041" +
    "\006\033\010\035\012\034\014\013\030\021\032\047\033" +
    "\050\001\002\000\030\004\uffed\005\uffed\006\uffed\010\uffed" +
    "\012\uffed\013\uffed\014\uffed\025\uffed\030\uffed\032\uffed\033" +
    "\uffed\001\002\000\004\030\243\001\002\000\004\021\235" +
    "\001\002\000\004\021\223\001\002\000\030\004\ufff3\005" +
    "\ufff3\006\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3\025\ufff3" +
    "\030\ufff3\032\ufff3\033\ufff3\001\002\000\030\004\uffe9\005" +
    "\uffe9\006\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\025\uffe9" +
    "\030\uffe9\032\uffe9\033\uffe9\001\002\000\030\004\uffef\005" +
    "\uffef\006\uffef\010\uffef\012\uffef\013\uffef\014\uffef\025\uffef" +
    "\030\uffef\032\uffef\033\uffef\001\002\000\004\030\200\001" +
    "\002\000\026\004\046\005\041\006\033\010\035\012\034" +
    "\014\013\025\175\030\021\032\047\033\050\001\002\000" +
    "\030\004\ufff1\005\ufff1\006\ufff1\010\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\025\ufff1\030\ufff1\032\ufff1\033\ufff1\001\002\000" +
    "\006\025\167\027\170\001\002\000\030\004\uffeb\005\uffeb" +
    "\006\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb\025\uffeb\030" +
    "\uffeb\032\uffeb\033\uffeb\001\002\000\004\030\065\001\002" +
    "\000\004\021\061\001\002\000\004\021\051\001\002\000" +
    "\012\007\056\030\055\034\053\035\052\001\002\000\030" +
    "\007\uffa9\020\uffa9\021\uffa9\022\uffa9\027\uffa9\030\uffa9\031" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\040\uffa9\001\002\000\030" +
    "\007\uffab\020\uffab\021\uffab\022\uffab\027\uffab\030\uffab\031" +
    "\uffab\034\uffab\035\uffab\036\uffab\040\uffab\001\002\000\004" +
    "\022\057\001\002\000\030\007\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\034\uffa8\035\uffa8\036\uffa8" +
    "\040\uffa8\001\002\000\030\007\uffaa\020\uffaa\021\uffaa\022" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\034\uffaa\035\uffaa\036\uffaa" +
    "\040\uffaa\001\002\000\004\027\060\001\002\000\030\004" +
    "\uff97\005\uff97\006\uff97\010\uff97\012\uff97\013\uff97\014\uff97" +
    "\025\uff97\030\uff97\032\uff97\033\uff97\001\002\000\004\030" +
    "\062\001\002\000\004\022\063\001\002\000\004\027\064" +
    "\001\002\000\030\004\uff98\005\uff98\006\uff98\010\uff98\012" +
    "\uff98\013\uff98\014\uff98\025\uff98\030\uff98\032\uff98\033\uff98" +
    "\001\002\000\010\017\071\027\066\036\067\001\002\000" +
    "\032\004\uffe6\005\uffe6\006\uffe6\010\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\025\uffe6\030\uffe6\032\uffe6\033\uffe6\042\uffe6\001" +
    "\002\000\004\030\166\001\002\000\006\027\102\036\101" +
    "\001\002\000\004\007\072\001\002\000\006\027\073\031" +
    "\074\001\002\000\032\004\uffe4\005\uffe4\006\uffe4\010\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\025\uffe4\030\uffe4\032\uffe4\033" +
    "\uffe4\042\uffe4\001\002\000\004\007\100\001\002\000\034" +
    "\004\uffe3\005\uffe3\006\uffe3\010\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\025\uffe3\030\uffe3\031\076\032\uffe3\033\uffe3\042\uffe3" +
    "\001\002\000\004\007\077\001\002\000\034\004\uffc8\005" +
    "\uffc8\006\uffc8\010\uffc8\012\uffc8\013\uffc8\014\uffc8\025\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\042\uffc8\001\002\000" +
    "\034\004\uffc7\005\uffc7\006\uffc7\010\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\025\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\042" +
    "\uffc7\001\002\000\004\030\104\001\002\000\032\004\uffe5" +
    "\005\uffe5\006\uffe5\010\uffe5\012\uffe5\013\uffe5\014\uffe5\025" +
    "\uffe5\030\uffe5\032\uffe5\033\uffe5\042\uffe5\001\002\000\006" +
    "\027\uffca\036\uffca\001\002\000\010\017\105\027\uffcc\036" +
    "\uffcc\001\002\000\020\007\056\015\120\016\115\021\111" +
    "\030\055\034\053\035\052\001\002\000\010\020\150\027" +
    "\164\031\125\001\002\000\006\020\145\027\163\001\002" +
    "\000\004\040\140\001\002\000\014\007\056\021\111\030" +
    "\055\034\053\035\052\001\002\000\004\027\153\001\002" +
    "\000\016\007\056\021\111\027\137\030\055\034\053\035" +
    "\052\001\002\000\030\007\uffba\020\uffba\021\uffba\022\uffba" +
    "\027\uffba\030\uffba\031\122\034\uffba\035\uffba\036\uffba\040" +
    "\uffba\001\002\000\006\027\uffa3\036\uffa3\001\002\000\030" +
    "\007\uffb9\020\uffb9\021\uffb9\022\uffb9\027\uffb9\030\uffb9\031" +
    "\122\034\uffb9\035\uffb9\036\uffb9\040\uffb9\001\002\000\026" +
    "\007\uffc0\020\uffc0\021\uffc0\022\uffc0\027\uffc0\030\uffc0\034" +
    "\uffc0\035\uffc0\036\uffc0\040\uffc0\001\002\000\006\027\uffa4" +
    "\036\uffa4\001\002\000\026\007\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\027\uffb8\030\uffb8\034\uffb8\035\uffb8\036\uffb8\040\uffb8" +
    "\001\002\000\014\007\056\021\111\030\055\034\053\035" +
    "\052\001\002\000\030\007\uffb4\020\uffb4\021\uffb4\022\uffb4" +
    "\027\uffb4\030\uffb4\031\125\034\uffb4\035\uffb4\036\uffb4\040" +
    "\uffb4\001\002\000\026\007\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\027\uffb5\030\uffb5\034\uffb5\035\uffb5\036\uffb5\040\uffb5\001" +
    "\002\000\014\007\056\021\126\030\055\034\053\035\052" +
    "\001\002\000\014\007\056\021\111\030\055\034\053\035" +
    "\052\001\002\000\030\007\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\034\uffb7\035\uffb7\036\uffb7\040" +
    "\uffb7\001\002\000\004\031\125\001\002\000\004\022\132" +
    "\001\002\000\030\007\uffb6\020\uffb6\021\uffb6\022\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\034\uffb6\035\uffb6\036\uffb6\040\uffb6" +
    "\001\002\000\026\007\uffbb\020\uffbb\021\uffbb\022\uffbb\027" +
    "\uffbb\030\uffbb\034\uffbb\035\uffbb\036\uffbb\040\uffbb\001\002" +
    "\000\006\020\150\031\125\001\002\000\004\020\145\001" +
    "\002\000\004\040\140\001\002\000\036\004\uffc3\005\uffc3" +
    "\006\uffc3\010\uffc3\012\uffc3\013\uffc3\014\uffc3\025\uffc3\027" +
    "\uffc3\030\uffc3\032\uffc3\033\uffc3\036\uffc3\042\uffc3\001\002" +
    "\000\014\007\056\021\111\030\055\034\053\035\052\001" +
    "\002\000\016\007\uffc2\021\uffc2\027\uffc2\030\uffc2\034\uffc2" +
    "\035\uffc2\001\002\000\022\007\uff9c\021\uff9c\022\uff9c\027" +
    "\uff9c\030\uff9c\034\uff9c\035\uff9c\036\uff9c\001\002\000\024" +
    "\007\uffa2\021\uffa2\022\uffa2\027\uffa2\030\uffa2\034\uffa2\035" +
    "\uffa2\036\uffa2\040\140\001\002\000\022\007\uffa1\021\uffa1" +
    "\022\uffa1\027\uffa1\030\uffa1\034\uffa1\035\uffa1\036\uffa1\001" +
    "\002\000\014\007\056\021\111\030\055\034\053\035\052" +
    "\001\002\000\026\007\uff9f\021\uff9f\022\uff9f\027\uff9f\030" +
    "\uff9f\031\125\034\uff9f\035\uff9f\036\uff9f\040\uff9f\001\002" +
    "\000\024\007\uff9d\021\uff9d\022\uff9d\027\uff9d\030\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\040\uff9d\001\002\000\014\007\056" +
    "\021\111\030\055\034\053\035\052\001\002\000\026\007" +
    "\uffa0\021\uffa0\022\uffa0\027\uffa0\030\uffa0\031\125\034\uffa0" +
    "\035\uffa0\036\uffa0\040\uffa0\001\002\000\024\007\uff9e\021" +
    "\uff9e\022\uff9e\027\uff9e\030\uff9e\034\uff9e\035\uff9e\036\uff9e" +
    "\040\uff9e\001\002\000\036\004\uffc4\005\uffc4\006\uffc4\010" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\025\uffc4\027\uffc4\030\uffc4" +
    "\032\uffc4\033\uffc4\036\uffc4\042\uffc4\001\002\000\006\022" +
    "\160\031\125\001\002\000\004\022\156\001\002\000\030" +
    "\007\uffbf\020\uffbf\021\uffbf\022\uffbf\027\uffbf\030\uffbf\031" +
    "\122\034\uffbf\035\uffbf\036\uffbf\040\uffbf\001\002\000\026" +
    "\007\uffbe\020\uffbe\021\uffbe\022\uffbe\027\uffbe\030\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\040\uffbe\001\002\000\030\007\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\027\uffbd\030\uffbd\031\122\034" +
    "\uffbd\035\uffbd\036\uffbd\040\uffbd\001\002\000\026\007\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\027\uffbc\030\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\040\uffbc\001\002\000\016\007\uffc1\021\uffc1" +
    "\027\uffc1\030\uffc1\034\uffc1\035\uffc1\001\002\000\036\004" +
    "\uffc6\005\uffc6\006\uffc6\010\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\025\uffc6\027\uffc6\030\uffc6\032\uffc6\033\uffc6\036\uffc6\042" +
    "\uffc6\001\002\000\036\004\uffc5\005\uffc5\006\uffc5\010\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\025\uffc5\027\uffc5\030\uffc5\032" +
    "\uffc5\033\uffc5\036\uffc5\042\uffc5\001\002\000\006\027\uffc9" +
    "\036\uffc9\001\002\000\010\017\105\027\uffcb\036\uffcb\001" +
    "\002\000\030\004\uffe7\005\uffe7\006\uffe7\010\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\025\uffe7\030\uffe7\032\uffe7\033\uffe7\001" +
    "\002\000\030\004\uffe8\005\uffe8\006\uffe8\010\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\025\uffe8\030\uffe8\032\uffe8\033\uffe8\001" +
    "\002\000\030\004\uffee\005\uffee\006\uffee\010\uffee\012\uffee" +
    "\013\uffee\014\uffee\025\uffee\030\uffee\032\uffee\033\uffee\001" +
    "\002\000\030\004\ufff4\005\ufff4\006\ufff4\010\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\025\ufff4\030\ufff4\032\ufff4\033\ufff4\001" +
    "\002\000\030\004\uffea\005\uffea\006\uffea\010\uffea\012\uffea" +
    "\013\uffea\014\uffea\025\uffea\030\uffea\032\uffea\033\uffea\001" +
    "\002\000\030\004\ufff0\005\ufff0\006\ufff0\010\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\025\ufff0\030\ufff0\032\ufff0\033\ufff0\001" +
    "\002\000\014\004\ufffb\005\ufffb\006\ufffb\025\ufffb\042\ufffb" +
    "\001\002\000\030\004\ufff2\005\ufff2\006\ufff2\010\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\025\ufff2\030\ufff2\032\ufff2\033\ufff2" +
    "\001\002\000\030\004\uffec\005\uffec\006\uffec\010\uffec\012" +
    "\uffec\013\uffec\014\uffec\025\uffec\030\uffec\032\uffec\033\uffec" +
    "\001\002\000\010\017\203\027\201\036\067\001\002\000" +
    "\032\004\uffe2\005\uffe2\006\uffe2\010\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\025\uffe2\030\uffe2\032\uffe2\033\uffe2\042\uffe2\001" +
    "\002\000\006\027\222\036\101\001\002\000\014\007\205" +
    "\021\111\030\055\034\210\035\207\001\002\000\006\027" +
    "\217\036\067\001\002\000\010\027\214\031\uffaa\036\067" +
    "\001\002\000\006\027\211\036\067\001\002\000\010\027" +
    "\uffac\031\uffa9\036\uffac\001\002\000\010\027\uffad\031\uffab" +
    "\036\uffad\001\002\000\032\004\uffe0\005\uffe0\006\uffe0\010" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\025\uffe0\030\uffe0\032\uffe0" +
    "\033\uffe0\042\uffe0\001\002\000\006\027\213\036\101\001" +
    "\002\000\032\004\uffdd\005\uffdd\006\uffdd\010\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\025\uffdd\030\uffdd\032\uffdd\033\uffdd\042" +
    "\uffdd\001\002\000\032\004\uffdf\005\uffdf\006\uffdf\010\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\025\uffdf\030\uffdf\032\uffdf\033" +
    "\uffdf\042\uffdf\001\002\000\006\027\216\036\101\001\002" +
    "\000\032\004\uffde\005\uffde\006\uffde\010\uffde\012\uffde\013" +
    "\uffde\014\uffde\025\uffde\030\uffde\032\uffde\033\uffde\042\uffde" +
    "\001\002\000\032\004\uffdc\005\uffdc\006\uffdc\010\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\025\uffdc\030\uffdc\032\uffdc\033\uffdc" +
    "\042\uffdc\001\002\000\006\027\221\036\101\001\002\000" +
    "\032\004\uffdb\005\uffdb\006\uffdb\010\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\025\uffdb\030\uffdb\032\uffdb\033\uffdb\042\uffdb\001" +
    "\002\000\032\004\uffe1\005\uffe1\006\uffe1\010\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\025\uffe1\030\uffe1\032\uffe1\033\uffe1\042" +
    "\uffe1\001\002\000\014\007\056\021\111\030\055\034\053" +
    "\035\052\001\002\000\004\022\225\001\002\000\004\024" +
    "\226\001\002\000\026\003\044\004\046\005\041\006\033" +
    "\010\035\012\034\014\013\030\021\032\047\033\050\001" +
    "\002\000\026\004\046\005\041\006\033\010\035\012\034" +
    "\014\013\025\230\030\021\032\047\033\050\001\002\000" +
    "\032\004\uff9b\005\uff9b\006\uff9b\010\uff9b\011\231\012\uff9b" +
    "\013\uff9b\014\uff9b\025\uff9b\030\uff9b\032\uff9b\033\uff9b\001" +
    "\002\000\004\024\232\001\002\000\026\003\044\004\046" +
    "\005\041\006\033\010\035\012\034\014\013\030\021\032" +
    "\047\033\050\001\002\000\026\004\046\005\041\006\033" +
    "\010\035\012\034\014\013\025\234\030\021\032\047\033" +
    "\050\001\002\000\030\004\uff9a\005\uff9a\006\uff9a\010\uff9a" +
    "\012\uff9a\013\uff9a\014\uff9a\025\uff9a\030\uff9a\032\uff9a\033" +
    "\uff9a\001\002\000\014\007\056\021\111\030\055\034\053" +
    "\035\052\001\002\000\004\022\237\001\002\000\004\024" +
    "\240\001\002\000\026\003\044\004\046\005\041\006\033" +
    "\010\035\012\034\014\013\030\021\032\047\033\050\001" +
    "\002\000\026\004\046\005\041\006\033\010\035\012\034" +
    "\014\013\025\242\030\021\032\047\033\050\001\002\000" +
    "\030\004\uff99\005\uff99\006\uff99\010\uff99\012\uff99\013\uff99" +
    "\014\uff99\025\uff99\030\uff99\032\uff99\033\uff99\001\002\000" +
    "\010\017\246\027\244\036\067\001\002\000\032\004\uffda" +
    "\005\uffda\006\uffda\010\uffda\012\uffda\013\uffda\014\uffda\025" +
    "\uffda\030\uffda\032\uffda\033\uffda\042\uffda\001\002\000\006" +
    "\027\263\036\101\001\002\000\014\007\250\021\111\030" +
    "\055\034\210\035\207\001\002\000\006\027\260\036\067" +
    "\001\002\000\010\027\255\031\uffaa\036\067\001\002\000" +
    "\006\027\252\036\067\001\002\000\032\004\uffd4\005\uffd4" +
    "\006\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4\025\uffd4\030" +
    "\uffd4\032\uffd4\033\uffd4\042\uffd4\001\002\000\006\027\254" +
    "\036\101\001\002\000\032\004\uffd3\005\uffd3\006\uffd3\010" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\025\uffd3\030\uffd3\032\uffd3" +
    "\033\uffd3\042\uffd3\001\002\000\032\004\uffd8\005\uffd8\006" +
    "\uffd8\010\uffd8\012\uffd8\013\uffd8\014\uffd8\025\uffd8\030\uffd8" +
    "\032\uffd8\033\uffd8\042\uffd8\001\002\000\006\027\257\036" +
    "\101\001\002\000\032\004\uffd7\005\uffd7\006\uffd7\010\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\025\uffd7\030\uffd7\032\uffd7\033" +
    "\uffd7\042\uffd7\001\002\000\032\004\uffd6\005\uffd6\006\uffd6" +
    "\010\uffd6\012\uffd6\013\uffd6\014\uffd6\025\uffd6\030\uffd6\032" +
    "\uffd6\033\uffd6\042\uffd6\001\002\000\006\027\262\036\101" +
    "\001\002\000\032\004\uffd5\005\uffd5\006\uffd5\010\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\025\uffd5\030\uffd5\032\uffd5\033\uffd5" +
    "\042\uffd5\001\002\000\032\004\uffd9\005\uffd9\006\uffd9\010" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\025\uffd9\030\uffd9\032\uffd9" +
    "\033\uffd9\042\uffd9\001\002\000\016\004\ufff5\005\ufff5\006" +
    "\ufff5\014\ufff5\030\ufff5\042\ufff5\001\002\000\016\004\ufff6" +
    "\005\ufff6\006\ufff6\014\ufff6\030\ufff6\042\ufff6\001\002\000" +
    "\004\002\000\001\002\000\004\023\uffa7\001\002\000\014" +
    "\004\ufffe\005\ufffe\006\ufffe\025\ufffe\042\ufffe\001\002\000" +
    "\004\023\uffa5\001\002\000\004\023\uffa6\001\002\000\004" +
    "\021\274\001\002\000\004\022\275\001\002\000\004\024" +
    "\276\001\002\000\026\003\044\004\046\005\041\006\033" +
    "\010\035\012\034\014\013\030\021\032\047\033\050\001" +
    "\002\000\026\004\046\005\041\006\033\010\035\012\034" +
    "\013\300\014\013\030\021\032\047\033\050\001\002\000" +
    "\012\007\056\030\055\034\053\035\052\001\002\000\004" +
    "\027\302\001\002\000\004\025\303\001\002\000\014\004" +
    "\ufffc\005\ufffc\006\ufffc\025\ufffc\042\ufffc\001\002\000\016" +
    "\004\ufffa\005\ufffa\006\ufffa\014\ufffa\030\ufffa\042\ufffa\001" +
    "\002\000\014\004\267\005\272\006\271\025\307\042\024" +
    "\001\002\000\016\004\ufff8\005\ufff8\006\ufff8\014\ufff8\030" +
    "\ufff8\042\ufff8\001\002\000\004\002\uffff\001\002\000\010" +
    "\017\313\027\311\036\312\001\002\000\032\004\uffd2\005" +
    "\uffd2\006\uffd2\010\uffd2\012\uffd2\013\uffd2\014\uffd2\025\uffd2" +
    "\030\uffd2\032\uffd2\033\uffd2\042\uffd2\001\002\000\004\030" +
    "\334\001\002\000\020\007\056\015\326\016\325\021\111" +
    "\030\055\034\053\035\052\001\002\000\006\027\315\036" +
    "\316\001\002\000\032\004\uffd1\005\uffd1\006\uffd1\010\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\025\uffd1\030\uffd1\032\uffd1\033" +
    "\uffd1\042\uffd1\001\002\000\004\030\317\001\002\000\010" +
    "\017\320\027\uffb3\036\uffb3\001\002\000\020\007\056\015" +
    "\120\016\115\021\111\030\055\034\053\035\052\001\002" +
    "\000\006\027\uffaf\036\uffaf\001\002\000\006\027\uffb1\036" +
    "\uffb1\001\002\000\004\027\333\001\002\000\004\036\312" +
    "\001\002\000\006\027\330\036\uffa3\001\002\000\006\027" +
    "\327\036\uffa4\001\002\000\032\004\uffcf\005\uffcf\006\uffcf" +
    "\010\uffcf\012\uffcf\013\uffcf\014\uffcf\025\uffcf\030\uffcf\032" +
    "\uffcf\033\uffcf\042\uffcf\001\002\000\032\004\uffd0\005\uffd0" +
    "\006\uffd0\010\uffd0\012\uffd0\013\uffd0\014\uffd0\025\uffd0\030" +
    "\uffd0\032\uffd0\033\uffd0\042\uffd0\001\002\000\006\027\332" +
    "\036\316\001\002\000\032\004\uffcd\005\uffcd\006\uffcd\010" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\025\uffcd\030\uffcd\032\uffcd" +
    "\033\uffcd\042\uffcd\001\002\000\032\004\uffce\005\uffce\006" +
    "\uffce\010\uffce\012\uffce\013\uffce\014\uffce\025\uffce\030\uffce" +
    "\032\uffce\033\uffce\042\uffce\001\002\000\010\017\335\027" +
    "\uffb2\036\uffb2\001\002\000\020\007\056\015\120\016\115" +
    "\021\111\030\055\034\053\035\052\001\002\000\006\027" +
    "\uffae\036\uffae\001\002\000\006\027\uffb0\036\uffb0\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\011\010\024\012\014\022\016\033\021\034\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\303\010\024\012\014\022\304\033\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\267" +
    "\012\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\041\004\035\005\037\014\031\021\044" +
    "\026\036\033\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\171\005\173\014\170\021\176\026\172\033\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\067\001\001\000\002\001\001\000\004\033\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\013\113\016\106\020\105" +
    "\023\111\025\112\027\115\030\116\032\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\161\001\001" +
    "\000\014\013\113\016\154\020\153\027\115\030\116\001" +
    "\001\000\002\001\001\000\016\013\113\016\134\020\133" +
    "\027\115\030\116\032\135\001\001\000\004\031\132\001" +
    "\001\000\002\001\001\000\004\031\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\013" +
    "\113\016\123\020\122\027\115\030\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\126\001\001\000" +
    "\014\013\113\016\130\020\127\027\115\030\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\140\001\001\000\002\001\001\000" +
    "\020\013\113\015\141\016\134\020\133\027\115\030\116" +
    "\032\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\143\001\001\000\002\001\001\000\014\013\113" +
    "\016\146\020\145\027\115\030\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\013\113\016\151\020\150" +
    "\027\115\030\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\156\001\001\000\002\001\001\000\004\031" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\013\113\016\203\017\205\020\127\027\115\030\116" +
    "\001\001\000\004\011\217\001\001\000\004\011\214\001" +
    "\001\000\004\011\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\113\015\223\016\134\020\133" +
    "\027\115\030\116\032\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\226\004\035\005\037\014\031" +
    "\021\044\026\036\033\042\001\001\000\016\004\171\005" +
    "\173\014\170\021\176\026\172\033\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\232\004\035\005" +
    "\037\014\031\021\044\026\036\033\042\001\001\000\016" +
    "\004\171\005\173\014\170\021\176\026\172\033\175\001" +
    "\001\000\002\001\001\000\020\013\113\015\235\016\134" +
    "\020\133\027\115\030\116\032\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\240\004\035\005\037" +
    "\014\031\021\044\026\036\033\042\001\001\000\016\004" +
    "\171\005\173\014\170\021\176\026\172\033\175\001\001" +
    "\000\002\001\001\000\004\011\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\013\113\016\246\017\250" +
    "\020\127\027\115\030\116\001\001\000\004\011\260\001" +
    "\001\000\004\011\255\001\001\000\004\011\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\276\004\035\005\037\014\031\021" +
    "\044\026\036\033\042\001\001\000\016\004\171\005\173" +
    "\014\170\021\176\026\172\033\175\001\001\000\004\020" +
    "\300\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\267\012\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\313" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\013" +
    "\113\015\322\016\134\020\133\023\323\027\115\030\116" +
    "\032\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\013\113\015\320" +
    "\016\134\020\133\023\321\027\115\030\116\032\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\330\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\013\113\015\335\016\134\020\133\023\336\027\115" +
    "\030\116\032\142\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public String resultado;
    public int cont = 1;
    public Nodo padre;

    public void syntax_error(Symbol s){
        
        if (!s.value.toString().startsWith("-")){  
            Main.notificar_er("Error sintaxis en la linea " +(s.right+1) + " no se esperaba " + s.value );
        }
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        
            Main.notificar_er("Error no se encontró un punto de recuperación");
       
    }

    public Symbol getS(){
//        System.out.println ( s );
        return this.s;  
        
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ESCRITURA ::= Escritura Parentesis_a VALOR Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LECTURA ::= Lectura Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LECTURA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // WHILE ::= While Parentesis_a COMPARACION Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // IF ::= If Parentesis_a COMPARACION Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // IF ::= If Parentesis_a COMPARACION Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // AGREGA_COMPARACION ::= Op_logico COMPARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AGREGA_COMPARACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPERACION_REL ::= OPERACION_MAT Op_relacional OPERACION_MAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_REL",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPERACION_REL ::= VALOR Op_relacional OPERACION_MAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_REL",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPERACION_REL ::= OPERACION_MAT Op_relacional VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_REL",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPERACION_REL ::= VALOR Op_relacional VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_REL",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // COMPARACION ::= OPERACION_REL AGREGA_COMPARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // COMPARACION ::= OPERACION_REL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BOOLEANOS ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEANOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BOOLEANOS ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEANOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPOS_DATO ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DATO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPOS_DATO ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DATO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPOS_DATO ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS_DATO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VALOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VALOR ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VALOR ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VALOR ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NUMEROS ::= Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMEROS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NUMEROS ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMEROS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // AGREGA_BOL ::= Coma Identificador Igual COMPARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AGREGA_BOL",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // AGREGA_BOL ::= AGREGA_BOL Coma Identificador Igual COMPARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AGREGA_BOL",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // AGREGA_BOL ::= Coma Identificador Igual BOOLEANOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AGREGA_BOL",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // AGREGA_BOL ::= AGREGA_BOL Coma Identificador Igual BOOLEANOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AGREGA_BOL",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // AGREGA_BOL ::= Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AGREGA_BOL",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // AGREGA_BOL ::= AGREGA_BOL Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AGREGA_BOL",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // AGREGA_OPERACION ::= Op_aritmetico VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AGREGA_OPERACION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // AGREGA_OPERACION ::= Op_aritmetico OPERACION_MAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AGREGA_OPERACION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERACION_MAT3 ::= VALOR Op_aritmetico Parentesis_a OPERACION_MAT Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT3",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERACION_MAT2 ::= VALOR Op_aritmetico VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT2",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERACION_MAT1 ::= OPERACION_MAT2 AGREGA_OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT1",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERACION_MAT1 ::= OPERACION_MAT2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT1",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERACION_MAT ::= OPERACION_MAT3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERACION_MAT ::= OPERACION_MAT3 AGREGA_OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERACION_MAT ::= Parentesis_a VALOR Parentesis_c AGREGA_OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERACION_MAT ::= Parentesis_a VALOR Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERACION_MAT ::= Parentesis_a OPERACION_MAT Parentesis_c AGREGA_OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERACION_MAT ::= Parentesis_a OPERACION_MAT Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACION_MAT ::= OPERACION_MAT1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERACION_LOG ::= OPERACION_REL AGREGA_COMPARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_LOG",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACION_LOG ::= OPERACION_LOG OPERACION_REL AGREGA_COMPARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_LOG",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIGNACION ::= Identificador Igual OPERACION_LOG P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIGNACION ::= Identificador Igual BOOLEANOS P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIGNACION ::= Identificador Igual VALOR P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGNACION ::= Identificador Igual OPERACION_MAT P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONCATENAR ::= Op_aritmetico Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONCATENAR ::= CONCATENAR Op_aritmetico Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AGREGAR ::= Coma ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AGREGAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // AGREGAR ::= AGREGAR Coma ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AGREGAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // AGREGAR ::= Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AGREGAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // AGREGAR ::= AGREGAR Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AGREGAR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Boolean Identificador Igual BOOLEANOS AGREGA_BOL P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Boolean Identificador Igual COMPARACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Boolean Identificador Igual True P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Boolean Identificador Igual False P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Boolean Identificador AGREGA_BOL P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Boolean Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Float Identificador Igual NUMEROS AGREGAR P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Float Identificador Igual NUMEROS P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Float Identificador Igual OPERACION_MAT AGREGAR P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Float Identificador Igual OPERACION_MAT P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Float Identificador Igual Cadena AGREGAR P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Float Identificador Igual Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Float Identificador AGREGAR P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Int Identificador Igual OPERACION_MAT AGREGAR P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Int Identificador Igual OPERACION_MAT P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Int Identificador Igual NUMEROS AGREGAR P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Int Identificador Igual Cadena AGREGAR P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Int Identificador Igual Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;
       //   System.out.println("");
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Int Identificador Igual NUMEROS P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Int Identificador AGREGAR P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= String Identificador Igual Cadena CONCATENAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= String Identificador Igual Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= String Identificador AGREGAR P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= String Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= error Llave_c 
            {
              Object RESULT =null;
		//  System.out.println ( "Error" + sym.ERROR ) ;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= error P_coma 
            {
              Object RESULT =null;
	//  System.out.println ( "Error" + sym.ERROR ) ;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= LECTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA LECTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACIONES ::= error Llave_c 
            {
              Object RESULT =null;
	//	  System.out.println ( "Error" + sym.ERROR ) ;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACIONES ::= error P_coma 
            {
              Object RESULT =null;
		//  System.out.println ( "Error" + sym.ERROR ) ;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACIONES ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACIONES ::= DECLARACIONES ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACIONES ::= DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // METODO ::= Void Metodo Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // METODO ::= TIPOS_DATO Metodo Parentesis_a Parentesis_c Llave_a SENTENCIA Return VALOR P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // METODOS ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // METODOS ::= METODOS METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Class Inicio Llave_a DECLARACIONES METODOS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Class Inicio Llave_a METODOS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

